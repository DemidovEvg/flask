"""empty message

Revision ID: 9d292789b732
Revises: b9296da9fc41
Create Date: 2023-01-15 00:26:36.349185

"""
import os
import random
import datetime as dt
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session
from project.models import Product, Trip, Place

# revision identifiers, used by Alembic.
revision = '9d292789b732'
down_revision = 'b9296da9fc41'
branch_labels = None
depends_on = None


def fill_test_data():
    connection = op.get_bind()
    session = Session(bind=connection)

    session.add_all(
        [Product(name='Алмаз'),
         Product(name='Телевизор'),
         Product(name='Конфеты'),
         Product(name='Гелий'),
         Product(name='Мопеды')]
    )
    session.add_all(
        [
            Place(name='Санкт-Петербург'),
            Place(name='Москва'),
            Place(name='Воронеж'),
            Place(name='Киров'),
            Place(name='Норильск'),
            Place(name='Ростов-на-Дону'),
            Place(name='Йошкар-Ола')
        ]
    )
    session.flush()
    trips = []
    available_places = session.query(Place).all()
    available_products = session.query(Product).all()

    for _ in range(20):
        departure_place, arrival_place = random.sample(available_places, k=2)
        departure_at = dt.datetime.now() - dt.timedelta(days=random.randint(0, 100),
                                                        hours=random.randint(0, 100))
        arrival_at = departure_at + dt.timedelta(hours=random.randint(0, 100))
        product = random.choice(available_products)
        trips.append(
            Trip(
                departure_place=departure_place,
                arrival_place=arrival_place,
                departure_at=departure_at,
                arrival_at=arrival_at,
                product=product
            )
        )
    session.add_all(trips)
    session.commit()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('place',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(length=50), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    with op.batch_alter_table('place', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_place_name'), [
                              'name'], unique=True)

    op.create_table('product',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(length=50), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_product_name'), [
                              'name'], unique=True)

    op.create_table('trip',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('departure_place_id',
                              sa.Integer(), nullable=True),
                    sa.Column('arrival_place_id', sa.Integer(), nullable=True),
                    sa.Column('departure_at', sa.DateTime(), nullable=True),
                    sa.Column('arrival_at', sa.DateTime(), nullable=True),
                    sa.Column('product_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['arrival_place_id'], ['place.id'], ),
                    sa.ForeignKeyConstraint(
                        ['departure_place_id'], ['place.id'], ),
                    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    with op.batch_alter_table('trucks', schema=None) as batch_op:
        batch_op.drop_constraint('trucks_name_key', type_='unique')
        batch_op.create_index(batch_op.f('ix_trucks_dt_created'), [
                              'dt_created'], unique=False)
        batch_op.create_index(batch_op.f('ix_trucks_dt_updated'), [
                              'dt_updated'], unique=False)
        batch_op.create_index(batch_op.f('ix_trucks_name'), [
                              'name'], unique=True)

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint('users_email_key', type_='unique')
        batch_op.create_index(batch_op.f('ix_users_email'), [
                              'email'], unique=True)

    if os.environ.get("MIGRATIONS_WITH_TEST_DATA").upper() == 'TRUE':
        fill_test_data()

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.create_unique_constraint('users_email_key', ['email'])

    with op.batch_alter_table('trucks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_trucks_name'))
        batch_op.drop_index(batch_op.f('ix_trucks_dt_updated'))
        batch_op.drop_index(batch_op.f('ix_trucks_dt_created'))
        batch_op.create_unique_constraint('trucks_name_key', ['name'])

    op.drop_table('trip')
    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_product_name'))

    op.drop_table('product')
    with op.batch_alter_table('place', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_place_name'))

    op.drop_table('place')
    # ### end Alembic commands ###
